S[i] <- sqrt((sum(temp_2-Z[i])^(2))/(R-1))
}
for(i in 1:H){
for(j in 1:length(lambdas)){
matrix[i,j] <- (S[i])/(Z[i]^(1-lambdas[j]))
}
}
CC <- c()
M_lambda <- c()
de_lambda <- c()
for(i in 1:length(lambdas)){
M_lambda[i] <- sum(matrix[,i])/H
de_lambda[i] <- sqrt(sum(((matrix[,i])-(M_lambda[i]))^2)/(H-1))
CC[i] <- de_lambda[i]/M_lambda[i]
}
CC <- rbind(lambdas,CC)
CC
lambda <- CC[1,which.min(CC[2,])]
lambda
# Parece que la transformación debe ser elevar al cuadrado sin eliminar outliers ni
# valores extremos
NGSP <- NGSP^lambda
adf.test(NGSP)
autoplot(NGSP)
# Vamo a probar esta transformación
TNGSP <- sign(NGSP)*log1p(abs(NGSP))
autoplot(NGSP)
adf.test(TNGSP)
autoplot(TNGSP)
NGSP
NGSPmayor <- NGSP[NGSP>0]
NGSPmayor
autoplot(NGSPmayor)
NGSP[1]
#install.packages("forecast")
library(forecast)
library(tseries)
library(fpp2)
library(ggplot2)
library(fma)
library(expsmooth)
library("nortest")
#package faraway
library(faraway)
library(faraway)
getwd()
# Dataset and Setup
# Primero, importamos la serie de tiempo
setwd("C:/Users/orteg/OneDrive/Documents/GitHub/AnalisisSeriesTiempo")
datos <- read.csv("Libro1.csv", header = TRUE)
#datos <- datos[rownames(datos),]
NGSP <- ts(datos[,2])
# Graficamos nuestra serie para obtener una vista previa
autoplot(NGSP)
# Propuesta de modelo con auto.arima sale que es ARIMA(2,2,2)
autoarima <- auto.arima(NGSP)
autoarima
# FAC, FACP y varianza
FAC <- acf(NGSP)
FACP <- pacf(NGSP)
# Dickey-Fuller Aumentado para probar estacionariedad. El proceso es no estacionario
adf.test(NGSP)
pp.test(NGSP)
# Con el fin de convertir el proceso en uno estacionario, aplicaremos una transformación
# estabilizadora de varianza. Primero, veremos la transformación logarítmica
LNGSP <- log(NGSP)
autoplot(LNGSP)
LNGSP
# De momento, usaremos una transformación de raíz cúbica
CNGSP <- NGSP^(1/3)
autoplot(CNGSP)
# De momento, usaremos una transformación de raíz cúbica
CNGSP <- NGSP^(1/5)
autoplot(CNGSP)
datos <- read.csv("serie_final.csv", header = TRUE)
#datos <- datos[rownames(datos),]
NGSP <- ts(datos[,2])
# Graficamos nuestra serie para obtener una vista previa
autoplot(NGSP)
# Propuesta de modelo con auto.arima sale que es ARIMA(2,2,2)
autoarima <- auto.arima(NGSP)
autoarima
# FAC, FACP y varianza
FAC <- acf(NGSP)
FACP <- pacf(NGSP)
# Dickey-Fuller Aumentado para probar estacionariedad. El proceso es no estacionario
adf.test(NGSP)
pp.test(NGSP)
# Con el fin de convertir el proceso en uno estacionario, aplicaremos una transformación
# estabilizadora de varianza. Primero, veremos la transformación logarítmica
LNGSP <- log(NGSP)
autoplot(LNGSP)
# Ahora utilizaremos el siguiente comando para ver cuántas
# diferencias son necesarias para volver el proceso a uno estacionario.
ndiffs(NGSP)
# Aplicamos entonces una primera diferencia a la serie original
DNGSP <- diff(NGSP, differences = 2)
autoplot(DNGSP)
# Aplicamos entonces una primera diferencia a la serie original
DNGSP <- diff(NGSP, differences = 1)
autoplot(DNGSP)
# Aplicamos entonces una primera diferencia a la serie original
DNGSP <- diff(NGSP, differences = 0)
autoplot(DNGSP)
autoplot(NGSP)
# Aplicamos entonces una primera diferencia a la serie original
DNGSP <- diff(NGSP, differences = 1)
autoplot(NGSP)
# Aplicamos entonces una primera diferencia a la serie original
DNGSP <- diff(LNGSP, differences = 2)
autoplot(DNGSP)
adf.test(DNGSP)
library(forecast)
library(tseries)
library(fpp2)
library(ggplot2)
library(fma)
library(expsmooth)
library("nortest")
library(faraway)
getwd()
# Dataset and Setup
# Primero, importamos la serie de tiempo
setwd("C:/Users/orteg/OneDrive/Documents/GitHub/AnalisisSeriesTiempo")
datos <- read.csv("serie_final.csv", header = TRUE)
#datos <- datos[rownames(datos),]
NGSP <- ts(datos[,2])
NGSP
# Graficamos nuestra serie para obtener una vista previa
autoplot(NGSP)
# Propuesta de modelo con auto.arima sale que es ARIMA(0,2,0)
autoarima <- auto.arima(NGSP)
autoarima
# Dickey-Fuller Aumentado para probar estacionariedad. El proceso es no estacionario
adf.test(NGSP)
# Con el fin de convertir el proceso en uno estacionario, aplicaremos una transformación
# estabilizadora de varianza. Primero, veremos la transformación logarítmica
LNGSP <- log(NGSP)
adf.test(NGSP)
adf.test(LNGSP)
# Ahora utilizaremos el siguiente comando para ver cuántas
# diferencias son necesarias para volver el proceso a uno estacionario.
ndiffs(NGSP)
# Aplicamos entonces una primera diferencia a la serie original
DNGSP <- diff(NGSP, differences = 2)
adf.test(DNGSP)
autoplot(DNGSP)
DNGSP <- diff(LNGSP, differences = 2)
autoplot(NGSP)
autoplot(DNGSP)
adf.test(DNGSP)
# Aplicamos entonces una primera diferencia a la serie original
# Esto es no aplicando ninguna transformación
DNGSP <- diff(NGSP, differences = 2)
DNGSP <- diff(NGSP, differences = 2)
autoplot(NGSP)
autoplot(DNGSP)
adf.test(DNGSP)
# Esto es aplicando la transformación logarítmica
DLNGSP <- diff(LNGSP, differences = 2)
autoplot(NGSP)
autoplot(DLNGSP)
adf.test(DLNGSP)
autoplot(DLNGSP)
autoplot(DNGSP)
ggtsdisplay(DNGSP, lag.max=200)
ggtsdisplay(DLNGSP, lag.max=200)
D1NGSP <- diff(NGSP, differences = 1)
autoplot(D1NGSP)
adf.test(D1NGSP)
D1NGSP <- diff(LNGSP, differences = 1)
adf.test(D1NGSP)
#ggtsdisplay(DNGSP, lag.max=200)
ggtsdisplay(DLNGSP, lag.max=200)
ggtsdisplay(D1NGSP, lag.max=200)
ggtsdisplay(DNGSP, lag.max=200)
ggtsdisplay(DLNGSP, lag.max=200)
auto.arima(D1NGSP)
auto.arima(DLNGSP)
model <- Arima(DLNGSP, order=c(0,0,1))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
auto.arima(DLNGSP)
auto.arima(D1NGSP)
model <- Arima(DLNGSP, order=c(0,1,1))
residuals <- residuals(model)
checkresiduals(model)
#########################################################################################################
# Supuesto 1 (media cero)
#########################################################################################################
# Debemos verificar que el valor absoluto del cociente sea menor que dos para decir que no hay evidencia de que
# la media del proceso sea diferente de 0.
media <- mean(residuals)
lillie.test(x = residuals)
as <- rnorm(1000)
lillie.test(x = as)
model <- Arima(DLNGSP, order=c(2,1,0))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
backup <- ts(datos[,2])
model <- Arima(backup, order=c(2,1,0))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
model <- Arima(DNGSP, order=c(2,1,0))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
model <- Arima(DNGSP, order=c(1,1,0))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
ggtsdisplay(DLNGSP, lag.max=200) #MA(1)
model <- Arima(LNGSP, order=c(1,1,0))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
model <- Arima(LNGSP, order=c(0,2,1))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
mean(residuals)
ggtsdisplay(DLNGSP, lag.max=200) #MA(1)
auto.arima(DLNGSP)
model <- Arima(LNGSP, order=c(0,0,1))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
model <- Arima(DLNGSP, order=c(0,0,1))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
model <- Arima(DLNGSP, order=c(1,0,1))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
ggtsdisplay(DLNGSP, lag.max=200) #MA(1)
autoplot(LNGSP)
model <- Arima(LNGSP, order=c(2,1,0))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
mean(residuals)
ggtsdisplay(DNGSP, lag.max = 200)
ggtsdisplay(DNGSP, lag.max = 200)
ggtsdisplay(LDNGSP, lag.max = 200)
ggtsdisplay(LNGSP, lag.max = 200)
model <- Arima(LNGSP, order=c(0,1,1))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
mean(residuals)
sqrt(var())
model <- Arima(LNGSP, order=c(0,2,1))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
model <- Arima(LNGSP, order=c(0,2,0))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
model <- Arima(LNGSP, order=c(2,2,0))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
auto.arima(LNGSP)
model <- Arima(LNGSP, order=c(0,2,1))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
mean(residuals)
sqrt(var())
forecast(NGSP)
forecast(model,h=10)
autoplot(forecast(model,h=10)
)
model <- Arima(LNGSP, order=c(1,2,0))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
mean(residuals)
sqrt(var())
autoplot(forecast(model,h=10)
)
model <- Arima(LNGSP, order=c(2,2,0))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
mean(residuals)
sqrt(var())
autoplot(forecast(model,h=10)
)
model <- Arima(LNGSP, order=c(3,2,0))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
mean(residuals)
autoplot(forecast(model,h=10)
)
model <- Arima(LNGSP, order=c(1,2,1))
residuals <- residuals(model)
checkresiduals(model)
lillie.test(x = residuals)
mean(residuals)
auto.arima(LNGSP)
model <- Arima(LNGSP, order=c(0,2,1))
residuals <- residuals(model)
checkresiduals(model)
#####################################################################################
#####################################################################################
# Verificación de supuestos para ARIMA(0,2,1), obtenido con auto.arima
model <- Arima(LNGSP, order=c(0,2,1))
residuals <- residuals(model)
#########################################################################################################
# Supuesto 1 (media cero)
#########################################################################################################
# Debemos verificar que el valor absoluto del cociente sea menor que dos para decir que no hay evidencia de que
# la media del proceso sea diferente de 0.
media <- mean(residuals)
media
desv <- sqrt(var(residuals))
desv
N <- length(residuals)
p <- 0
d <- 1
q <- 0
cociente <- (sqrt(N-d-p)) * (media/desv)
abs(cociente)
#########################################################################################################
# Supuesto 2 (varianza constante)
#########################################################################################################
# Observamos de manera visual si la varianza parece ser constante o no
checkresiduals(model)
#########################################################################################################
# Supuesto 3 (residuos independientes)
#########################################################################################################
# Prueba de Ljung-Box
checkresiduals(model)
# Los residuos son independientes
# Con un valor de signficancia del 95%
Box.test(residuals,type="Ljung",lag=20)
# Los residuos son independientes
# Con un valor de signficancia del 95%
Box.test(residuals,type="Ljung")
#########################################################################################################
# Supuesto 4 (normalidad)
#########################################################################################################
# Verificar que aprox. el 95% de las observaciones se encuentren dentro del intervalo que se extiende 2
# desviaciones estándar por arriba y por debajo de la media, la cual esperamos que sea 0.
desv <- sqrt(var(residuals))
desv
LI2 <- -2*desv
LS2 <- 2*desv
LEFT <- -2*desv
RIGHT <- 2*desv
residuals
residuals[residuals>0]
length(residuals[residuals>0])
qqnorm(residuals)
qqline(residuals)
shapiro.test(residuals)
lillie.test(x = residuals)
checkresiduals(model)
length(residuals[residuals>RIGHT || residuals<LEFT])
residuals
RIGHT
residuals>RIGHT
JIJI <- length(residuals[residuals>RIGHT]) + length(residuals[residuals<LEFT])
JIJI
length(residuals)
length(residuals)/4
JIJI/length(residuals)
hist(residuals)
3/length(residuals)
hist(residuals)
hist(residuals, breaks = seq(from = 3*desv, tp = -3*desv, by = 0.1))
2*desv
3*desv
hist(residuals, breaks = seq(from = 0.3, tp = -0.3, by = 0.05))
seq(from = 0.3, tp = -0.3, by = 0.05)
hist(residuals, breaks = seq(from = 0.3, to = -0.3, by = 0.05)
)
hist(residuals, breaks = seq(from = -0.3, to = 0.3, by = 0.05)
)
hist(residuals, breaks = seq(from = -0.3, to = 0.3, by = 0.05))
# La primera prueba la pasa, sólo el 6.66% de las obsevaciones sobrepasa
# las dos desviaciones estándar
seq(from = -0.3, to = 0.3, by = 0.05)
hist(residuals, breaks = breaks)
# La primera prueba la pasa, sólo el 6.66% de las obsevaciones sobrepasa
# las dos desviaciones estándar
breaks <- seq(from = -0.3, to = 0.3, by = 0.05)
hist(residuals, breaks = breaks)
# La primera prueba la pasa, sólo el 6.66% de las obsevaciones sobrepasa
# las dos desviaciones estándar
breaks <- seq(from = -1, to = 1, by = 0.05)
hist(residuals, breaks = breaks)
# Supuesto 5 (no observaciones aberrantes)
# Prácticamente todas las observaciones deberían estar dentro del intervalo que se extiende 3 desviaciones
# estándar por arriba y por debajo de la media, la cual esperamos que sea 0.
desv <- sqrt(var(residuals))
desv
LEFT <- -3*desv
RIGHT <- 3*desv
JIJI <- length(residuals[residuals>RIGHT]) + length(residuals[residuals<LEFT])
JIJI
JIJI/length(residuals)
checkresiduals()
checkresiduals(model)
autoplot(LNGSP)
autoplot(NGSP)
autoplot(NGSP)
autoplot(LNGSP)
# Podemos ver que esto se puede explicar debido a que
NGSP[13]
# Podemos ver que esto se puede explicar debido a que
NGSP[12]
# Podemos ver que esto se puede explicar debido a que
NGSP[14]
# Podemos ver que esto se puede explicar debido a que
NGSP[15]
# Podemos ver que esto se puede explicar debido a que
NGSP[4]
# Podemos ver que esto se puede explicar debido a que
NGSP[5]
# Podemos ver que esto se puede explicar debido a que
NGSP[6]
# Podemos ver que esto se puede explicar debido a que
NGSP[11]
# Podemos ver que esto se puede explicar debido a que
NGSP[12]
# Podemos ver que esto se puede explicar debido a que
NGSP[13]
log(12)
plot(rexp(1000))
hist(rexp(1000))
autoplot(LNGSP)
autoplot(NGSP)
checkresiduals(model)
#########################################################################################################
# Supuesto 6 (parsimonía)
#########################################################################################################
# Ver con un 95% de confianza que todos los parámetros sean diferentes de 0.
model
#########################################################################################################
# Supuesto 6 (parsimonía)
#########################################################################################################
# Ver con un 95% de confianza que todos los parámetros sean diferentes de 0.
model$coef
model$sigma2
sqrt(model$sigma2)()
sqrt(model$sigma2)
sqrt(model$var.coef)
mean - 2*se
se <- sqrt(model$var.coef)
mean - 2*se
mean (-2)*se
mean - (2)*se
mean
#########################################################################################################
# Supuesto 6 (parsimonía)
#########################################################################################################
# Ver con un 95% de confianza que todos los parámetros sean diferentes de 0.
meanie <- model$coef
se <- sqrt(model$var.coef)
meanie - (2)*se
meanie + (2)*se
# En este caso, sólo tenemos un parámetro que sería
meanie
####################### Pronósticos #######################
# auto.arima
autoarima_pronostico <-forecast(autoarima, h = 3) # Duda con h = 3
####################### Pronósticos #######################
# auto.arima
autoarima_pronostico <-forecast(model, h = 3) # Duda con h = 3
autoplot(autoarima_pronostico)
autoarima_pronostico
exp(autoarima_pronostico)
exp(2)
autoarima_pronostico$x
autoarima_pronostico$fitted
autoarima_pronostico$series
####################### Pronósticos #######################
# auto.arima
fc <-forecast(model, h = 3) # Duda con h = 3
fc$mean<-exp(fc$mean)
fc$upper<-exp(fc$upper)
fc$lower<-exp(fc$lower)
fc$x<-exp(fc$x)
autoplot(autoarima_pronostico)
autoplot(fc)
fc$lower
fc
####################### Pronósticos #######################
# auto.arima
fc <-forecast(model, h = 50) # Duda con h = 3
fc$mean<-exp(fc$mean)
fc$upper<-exp(fc$upper)
fc$lower<-exp(fc$lower)
fc$x<-exp(fc$x)
autoplot(fc)
####################### Pronósticos #######################
# auto.arima
fc <-forecast(model, h = 5) # Duda con h = 3
fc$mean<-exp(fc$mean)
fc$upper<-exp(fc$upper)
fc$lower<-exp(fc$lower)
fc$x<-exp(fc$x)
autoplot(fc)
model
