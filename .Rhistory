#install.packages("forecast")
library(forecast)
library(tseries)
library(fpp2)
library(ggplot2)
library(fma)
library(expsmooth)
library("nortest")
#package faraway
library(faraway)
getwd()
datos <- read.csv("Henry_Hub_Natural_Gas_Spot_Price.csv", header = TRUE)
datos <- datos[rev(rownames(datos)),]
NGSP <- ts(datos[,2], start=1997, freq=12)
# Con esto podemos ver la serie de tiempo
autoplot(NGSP)
# Propuesta de modelo con auto.arima sale que es ARIMA(0,1,0) (I(1)), o sea caminata aleatoria.
# Eso sale sin usar el comando tsclean(NGSP). Usándolo sale ARIMA(1,1,0)
autoarima <- auto.arima(NGSP)
autoarima
FAC <- acf(NGSP)
FACP <- pacf(NGSP)
VarNGSP<-var(NGSP)
VarNGSP
backup <- NGSP
# Ahora utilizaremos el siguiente comando para ver cuántas
# diferencias son necesarias para volver el proceso a uno estacionario.
ndiffs(NGSP)
# Aplicamos entonces una primera diferencia a la serie original
DNGSP <- diff(NGSP)
autoplot(DNGSP)
DFAC <- acf(DNGSP)
DFACP <- pacf(DNGSP)
(NGSP, order=c(0,1,0))
model <- Arima(NGSP, order=c(0,1,0)) # Prometedor
residuals <- residuals(model)
checkresiduals(model)
media <- mean(residuals)
media
desv <- sqrt(var(residuals))
desv
N <- length(residuals)
p <- 0
d <- 1
q <- 0
cociente <- (sqrt(N-d-p)) * (media/desv)
abs(cociente)
# Supuesto 3 (residuos independientes)
# Prueba de Ljung-Box
checkresiduals(model)
Box.test(residuals,type="Ljung")
Box.Ljung.Test(residuals)
Box.test(residuals, lag = 10, type = c("Ljung-Box"))
Box.test(residuals, lag = 3, type = c("Ljung-Box"))
Box.test(residuals, lag = 5, type = c("Ljung-Box"))
Box.test(residuals, lag = 6, type = c("Ljung-Box"))
Box.test(residuals, lag = 7, type = c("Ljung-Box"))
Box.test(residuals, lag = 8, type = c("Ljung-Box"))
Box.test(residuals, lag = 9, type = c("Ljung-Box"))
Box.test(residuals, lag = 9, type = c("Ljung-Box"))
Box.test(residuals, lag = 7, type = c("Ljung-Box"))
Box.test(residuals, lag = 24, type = c("Ljung-Box"))
desv <- sqrt(var(residuals))
desv
LEFT <- -2*desv
RIGHT <- 2*desv
JIJI <- length(residuals[residuals>RIGHT]) + length(residuals[residuals<LEFT])
JIJI
JIJI/length(residuals)
lillie.test(x = residuals)
LI3 <- -3*desv
LS3 <- 3*desv
desv <- sqrt(var(residuals))
desv
LEFT <- -3*desv
RIGHT <- 3*desv
JIJI <- length(residuals[residuals>RIGHT]) + length(residuals[residuals<LEFT])
JIJI
JIJI/length(residuals)
hist(residuals, breaks = breaks)
breaks <- seq(from = -1, to = 1, by = 0.05)
hist(residuals, breaks = breaks)
breaks <- seq(from = -1, to = 1, by = 0.05)
hist(residuals, breaks = breaks)
breaks <- seq(from = -10, to = 10, by = 0.05)
hist(residuals, breaks = breaks)
breaks <- seq(from = -10, to = 10, by = 0.1)
hist(residuals, breaks = breaks)
breaks <- seq(from = -10, to = 10, by = 1)
hist(residuals, breaks = breaks)
breaks <- seq(from = -10, to = 10, by = 0.5)
hist(residuals, breaks = breaks)
# Supuesto 6 (parsimonía)
# Ver con un 95% de confianza que todos los parámetros sean diferentes de 0.
# En este caso no hay parámetros ya que el modelo es I(1).
meanie <- model$coef
se <- sqrt(model$var.coef)
meanie - (2)*se
meanie + (2)*se
meanie
model$coef
####################### Pronósticos #######################
# auto.arima
autoarima_pronostico <-forecast(autoarima, h = 3) # Duda con h = 3
autoplot(autoarima_pronostico)
autoarima_pronostico
####################### Pronósticos #######################
# auto.arima
autoarima_pronostico <-forecast(autoarima, h = 5) # Duda con h = 3
autoplot(autoarima_pronostico)
autoarima_pronostico
DFAC
# Ahora veremos cómo se comportan la FAC y la FACP
DFAC <- acf(DNGSP)
DFACP <- pacf(DNGSP) # Hacer test de significancia para ver si realmente son 0s
model <- Arima(NGSP, order=c(1,1,0)) # Prometedor
################# Análisis de residuos ##################
#Residuales
res_autoarima <- residuals(model)
checkresiduals(model)
residuals <- residuals(model)
checkresiduals(model)
media <- mean(residuals)
media
desv <- sqrt(var(residuals))
desv
N <- length(residuals)
p <- 0
d <- 1
q <- 0
cociente <- (sqrt(N-d-p)) * (media/desv)
abs(cociente)
#########################################################################################################
# Supuesto 2 (varianza constante)
#########################################################################################################
# Observamos de manera visual si la varianza parece ser constante o no
checkresiduals(model)
Box.test(residuals, lag = 24, type = c("Ljung-Box"))
Box.test(residuals, lag = 3, type = c("Ljung-Box"))
Box.test(residuals, lag = 4, type = c("Ljung-Box"))
Box.test(residuals, lag = 5, type = c("Ljung-Box"))
Box.test(residuals, lag = 6, type = c("Ljung-Box"))
Box.test(residuals, lag = 7, type = c("Ljung-Box"))
Box.test(residuals, lag = 8, type = c("Ljung-Box"))
Box.test(residuals, lag = 9, type = c("Ljung-Box"))
LI2 <- -2*desv
LS2 <- 2*desv
desv <- sqrt(var(residuals))
desv
LEFT <- -2*desv
RIGHT <- 2*desv
JIJI <- length(residuals[residuals>RIGHT]) + length(residuals[residuals<LEFT])
JIJI
JIJI/length(residuals)
breaks <- seq(from = -10, to = 10, by = 0.5)
hist(residuals, breaks = breaks)
LI3 <- -3*desv
LS3 <- 3*desv
desv <- sqrt(var(residuals))
desv
LEFT <- -3*desv
RIGHT <- 3*desv
JIJI <- length(residuals[residuals>RIGHT]) + length(residuals[residuals<LEFT])
JIJI
JIJI/length(residuals)
# Supuesto 6 (parsimonía)
# Ver con un 95% de confianza que todos los parámetros sean diferentes de 0.
# En este caso no hay parámetros ya que el modelo es I(1).
meanie <- model$coef
se <- sqrt(model$var.coef)
meanie - (2)*se
meanie + (2)*se
model$coef
# Supuesto 7 (modelo admisible)
# Verificar que los parámetros se encuentren dentro de las regiones admisibles correspondientes.
# En este caso no hay parámetros ya que el modelo es I(1).
meanie
# Supuesto 7 (modelo admisible)
# Verificar que los parámetros se encuentren dentro de las regiones admisibles correspondientes.
# En este caso no hay parámetros ya que el modelo es I(1).
abs(meanie)
# Supuesto 7 (modelo admisible)
# Verificar que los parámetros se encuentren dentro de las regiones admisibles correspondientes.
# En este caso no hay parámetros ya que el modelo es I(1).
is(abs(meanie)<1)
# Supuesto 7 (modelo admisible)
# Verificar que los parámetros se encuentren dentro de las regiones admisibles correspondientes.
# En este caso no hay parámetros ya que el modelo es I(1).
(abs(meanie)<1)
asdfasdf <- diff(NGSP, order(2))
autoplot(asdfasdf)
